/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.AssetAdminRole;

import Business.MedicalDevice.MedicalDevice;
import Business.Network.Network;
import Business.Organization.AssetMgtOrganization;
import Business.Organization.Organization;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Martin
 */
public class ViewInventoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewInventoryJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Network network;
    private String date; 
    private Date today;
   
    public ViewInventoryJPanel(JPanel upc, Organization org, Network nw) {
        initComponents();
        this.userProcessContainer = upc;
        this.organization = org;
        this.network = nw;
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        date = format.format(new Date());
        today = new Date();
        
        populateDeviceTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        viewHistoryJButton = new javax.swing.JButton();
        scheduleJButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("View Inventory");

        deviceJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Device ID", "Name", "Location", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deviceJTable);

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        viewHistoryJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewHistoryJButton.setText("Maintenance History >>");
        viewHistoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryJButtonActionPerformed(evt);
            }
        });

        scheduleJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scheduleJButton.setText("Request Schedule >>");
        scheduleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton)
                        .addGap(188, 188, 188)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewHistoryJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scheduleJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewHistoryJButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleJButton)
                    .addComponent(backJButton))
                .addContainerGap(94, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewHistoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = deviceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "No equipment is selected!");
            return;
        }
        
        MedicalDevice md = (MedicalDevice)deviceJTable.getValueAt(selectedRow, 0);
        ViewMaintHistoryJPanel jp = new ViewMaintHistoryJPanel(userProcessContainer, md, network);
        userProcessContainer.add("ViewMaintHistoryJPanel", jp);
         ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
    }//GEN-LAST:event_viewHistoryJButtonActionPerformed

    private void scheduleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = deviceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "No equipment is selected!");
            return;
        }
        
        MedicalDevice md = (MedicalDevice)deviceJTable.getValueAt(selectedRow, 0);
        ReqeustScheduleJPanel jp = new ReqeustScheduleJPanel(userProcessContainer, md, organization);
        userProcessContainer.add("ReqeustScheduleJPanel", jp);
        ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
    }//GEN-LAST:event_scheduleJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable deviceJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton scheduleJButton;
    private javax.swing.JButton viewHistoryJButton;
    // End of variables declaration//GEN-END:variables

    private void populateDeviceTable() {
        DefaultTableModel dtm = (DefaultTableModel)deviceJTable.getModel();
        dtm.setRowCount(0);
        
        for(MedicalDevice md : ((AssetMgtOrganization)organization).getMedicalDeviceInventory().getMedicalDeviceList()){
            Object[] row = new Object[4];
            row[0] = md;
            row[1] = md.getName();
            
            if(((AssetMgtOrganization)organization).searchDeviceByDate(md, date)){
                row[2] = ((AssetMgtOrganization)organization).getRequestByDate(date).getHospitalEnterpise().toString()
                        +" Room" + ((AssetMgtOrganization)organization).getRequestByDate(date).getSurgeryRoom().getRoomnumber().toString();
            }else{
                row[2] = md.getLocation();
            }
            if(today.after(md.getMaintScheduleHistory().getLastMaintenace().getNextMaintDate())){
                md.setStatus("Out Of Service");

            }
            row[3] = md.getStatus();
            
            dtm.addRow(row);
        }
    }
}
